#include <Arduino.h>
#include <WiFi.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "ESPNowW.h"

#define SCREEN_WIDTH         128  // OLED display width, in pixels
#define SCREEN_HEIGHT        32   // OLED display height, in pixels
#define OLED_RESET           -1   // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS       0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

#define POT_X                35
#define POT_Y                34

#define TRANSMITTER_INTERVAL 25

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'BATTLEBUTBOT' logo, 128x32px
const unsigned char bbb_logo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x18, 0x02, 0x00, 0x00, 0x00, 0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x30, 0x08, 0x06, 0x1f, 0xff, 0xc0, 0x40, 0x1d, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x04, 0x06, 0x02, 0x08, 0x08, 0x40, 0x08, 0x44, 0x03, 0xff, 0x80, 0x00, 0x01, 0xcf, 0xf8,
	0x10, 0x04, 0x07, 0x02, 0x08, 0x08, 0x40, 0x08, 0x64, 0x08, 0x50, 0x00, 0x00, 0x07, 0x7c, 0x00,
	0x18, 0x04, 0x0d, 0x02, 0x0c, 0x08, 0x60, 0x08, 0x24, 0x08, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00,
	0x08, 0x04, 0x09, 0x02, 0x04, 0x08, 0x20, 0x08, 0x24, 0x08, 0x40, 0x80, 0x00, 0x00, 0x04, 0x00,
	0x08, 0x04, 0x09, 0x02, 0x04, 0x08, 0x20, 0x08, 0x24, 0x08, 0x40, 0xff, 0xc1, 0xf0, 0x04, 0x00,
	0x08, 0x04, 0x19, 0x02, 0x04, 0x08, 0x20, 0x0c, 0x64, 0x08, 0x40, 0x80, 0x43, 0x18, 0x04, 0x00,
	0x08, 0x1c, 0x11, 0x02, 0x04, 0x08, 0x20, 0x05, 0xc4, 0x08, 0x40, 0x80, 0x42, 0x08, 0x04, 0x00,
	0x0f, 0xf8, 0x31, 0x02, 0x04, 0x10, 0x3f, 0x07, 0x04, 0x08, 0x40, 0x80, 0x46, 0x0c, 0x04, 0x00,
	0x04, 0x08, 0x23, 0xc2, 0x04, 0x10, 0x10, 0x07, 0x84, 0x0c, 0x40, 0x80, 0x44, 0x06, 0x04, 0x00,
	0x04, 0x0c, 0x3e, 0x83, 0x04, 0x10, 0x10, 0x04, 0x74, 0x04, 0x40, 0x80, 0xc4, 0x02, 0x04, 0x00,
	0x06, 0x04, 0x60, 0x81, 0x04, 0x10, 0x10, 0x04, 0x1c, 0x04, 0x40, 0x81, 0x8c, 0x02, 0x04, 0x00,
	0x02, 0x06, 0x40, 0x81, 0x04, 0x30, 0x10, 0x04, 0x0e, 0x04, 0x60, 0x8f, 0x08, 0x02, 0x04, 0x00,
	0x02, 0x06, 0xc0, 0xc1, 0x04, 0x20, 0x10, 0x06, 0x0a, 0x04, 0x20, 0x9f, 0x88, 0x02, 0x04, 0x00,
	0x02, 0x1c, 0x80, 0x41, 0x06, 0x20, 0x18, 0x02, 0x0a, 0x04, 0x20, 0x80, 0x88, 0x02, 0x04, 0x00,
	0x02, 0xf0, 0x80, 0x41, 0x82, 0x3f, 0xc8, 0x03, 0x0b, 0x04, 0x20, 0x80, 0x88, 0x02, 0x04, 0x00,
	0x03, 0x80, 0x80, 0x40, 0x80, 0x00, 0x07, 0xfb, 0x09, 0x84, 0x20, 0x80, 0x88, 0x02, 0x04, 0x00,
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xec, 0x20, 0x80, 0x8c, 0x06, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x00, 0xc1, 0x86, 0x0c, 0x06, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x03, 0xf8, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// REPLACE WITH THE MAC Address of your receiver
uint8_t recmac[]   = { 0x08, 0xB6, 0x1F, 0x29, 0x9A, 0x8C };
uint8_t transmac[] = { 0x3C, 0x71, 0xBF, 0x9D, 0x9F, 0x88 };

typedef struct esp_now_data {
	int roll;
	int pitch;
} esp_now_data;

unsigned long previousMillis = 0;
esp_now_data data;

static TaskHandle_t oled_handle, transmitter_handle;

void OnDataSent(const uint8_t* mac_addr, esp_now_send_status_t status);
static void oled_loop(void* v);
static void transmitter_loop(void* v);

void setup()
{
	// Init Serial Monitor
	Serial.begin(115200);
	Serial.println("starting..");
	WiFi.mode(WIFI_MODE_STA);

	Serial.println(WiFi.macAddress());
	ESPNow.set_mac(transmac);
	WiFi.disconnect();
	ESPNow.init();
	ESPNow.add_peer(recmac);
	// ESPNow.reg_send_cb(OnDataSent);

	pinMode(POT_X, INPUT);
	pinMode(POT_Y, INPUT);

	if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
		Serial.println(F("SSD1306 allocation failed"));
		for (;;) {
			;      // Don't proceed, loop forever
		}
	}

	xTaskCreate(oled_loop,
	            "oled_loop",
	            configMINIMAL_STACK_SIZE * 5,
	            NULL,
	            10,
	            &oled_handle);
	xTaskCreate(transmitter_loop,
	            "transmitter_loop",
	            configMINIMAL_STACK_SIZE * 10,
	            NULL,
	            10,
	            &transmitter_handle);
}

void loop()
{
}

void OnDataSent(const uint8_t* mac_addr, esp_now_send_status_t status)
{
	Serial.print("\r\nLast Packet Send Status:\t");
	Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

static void oled_loop(void* v)
{
	(void)v;
	for (;;) {
		display.clearDisplay();
		display.drawBitmap(0, 0, bbb_logo, 128, 32, WHITE);
		display.display();
		vTaskDelay(1000 / portTICK_RATE_MS);
		display.clearDisplay();
		display.drawBitmap(0, 5, bbb_logo, 128, 32, WHITE);
		display.display();
		vTaskDelay(1000 / portTICK_RATE_MS);
	}
}

static void transmitter_loop(void* v)
{
	(void)v;
	for (;;) {
		int p = map(analogRead(POT_Y), 0, 4095, -100, 100);
		int r = map(analogRead(POT_X), 0, 4095, -100, 100);
		p = constrain(p, -100, 100);
		r = constrain(r, -100, 100);
		if (abs(p) < 30) {
			p = 0;
		}
		if (abs(r) < 30) {
			r = 0;
		}

		if (p == data.pitch && r == data.roll) {
			// continue;
		}
		data.pitch = p;
		data.roll  = r;

		Serial.print(millis());
		Serial.print(": ");
		Serial.print(p);
		Serial.print(" - ");
		Serial.println(r);

		ESPNow.send_message(recmac, (uint8_t*)&data, sizeof(data));
		vTaskDelay(TRANSMITTER_INTERVAL / portTICK_RATE_MS);
	}
}
